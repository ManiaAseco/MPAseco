#RequireContext CSmMode

#Include "MathLib" as MathLib
#Include "TextLib" as TextLib
#Include "Libs/Nadeo/Mode.Script.txt" as Mode
#Include "Libs/Nadeo/Layers.Script.txt" as Layers
#Include "Libs/Nadeo/ShootMania/SM.Script.txt" as SM
#Include "Libs/Nadeo/ShootMania/Rules.Script.txt" as Rules
#Include "Libs/Nadeo/ShootMania/Score.Script.txt" as Score

#Const	CompatibleMapTypes	"MeleeArena"
#Const	Version				"2012-08-08"

/* -------------------------------------- */
// Settings
/* -------------------------------------- */
#Setting S_TimeLimit	600 as _("Time limit")	///< Time limit on a map
#Setting S_PointLimit	25	as _("Point limit")	///< Point limit on a map

#Const C_UITickInterval	200	///< Time interval between UI update
#Const C_NbBots			0	///< Number of bots

/* -------------------------------------- */
// Globales variables
/* -------------------------------------- */
declare Ident[]	G_SpawnsList;		///< Id of all the BlockSpawns of the map
declare Ident	G_LatestSpawnId;	///< Id of the last BlockSpawn used

/* -------------------------------------- */
// Functions
/* -------------------------------------- */

/* -------------------------------------- */
/// Fill the SpawnsList with all the BlockSpawns of the map
Void FillSpawnsList() {
	foreach (BlockSpawn in BlockSpawns) { G_SpawnsList.add(BlockSpawn.Id); }
}

/* ------------------------------------- */
/** Spawn a player
 *
 * @param	_Player		The player to spawn
 */
Void SpawnPlayers(CSmPlayer _Player) {
	if (G_SpawnsList.count == 0) FillSpawnsList();
	declare SpawnId = NullId;
	while (True) {
		SpawnId = G_SpawnsList[MathLib::Rand(0, G_SpawnsList.count - 1)];
		if (SpawnId != G_LatestSpawnId) break;
		if (G_SpawnsList.count == 1) break;
	}
	SM::SpawnPlayer(_Player, 0, BlockSpawns[SpawnId]);
	G_LatestSpawnId = SpawnId;
	declare Tmp = G_SpawnsList.remove(SpawnId);
}

/* ------------------------------------- */
/** Create the Scores table manialink
 *
 *	@return		The ManiaLink string
 */
Text CreateLayerScoresTable() {
	return
"""
<frame posn="0 -47">
	<quad posn="0 0 1" sizen="40 8" style="Bgs1InRace" halign="center" substyle="BgList"/>
	<label posn="0 -2 2" sizen="40 8" halign="center" text="{{{_("Point limit")}}}: {{{ S_PointLimit }}}" />
</frame>
""";
}

/* ------------------------------------- */
/** Update the Scores in Spawn manialink
 *
 *	@return		The manialink string
 */
Text UpdateLayerScoresInSpawn() {
	declare Top3 = "";
	declare I = 0;
	declare Icons = ["First", "Second", "Third"];
	
	foreach (Score in Scores) {
		declare Pseudo = TextLib::MLEncode(Score.User.Name);
		
		Top3 ^=
"""
<frame posn="-140 {{{ I * -30 }}} -25">
	<quad posn="0 -2" sizen="30 30" valign="center" style="Icons64x64_1" substyle="{{{ Icons[I] }}}" />
	<label posn="30 0" sizen="200 20" textsize="15" valign="center" text="{{{ Pseudo }}}" />
	<label posn="270 0" sizen="20 20" textsize="15" halign="right" valign="center" text="{{{ Score.RoundPoints }}}" />
</frame>
""";
		I += 1;
		if (I >= 3) break;
	}
	
	return 
"""
<frame posn="0 85 -20">
	<frame posn="0 -65">
		<quad posn="0 15 -30" sizen="290 92" halign="center" bgcolor="222c" />
		{{{ Top3 }}}
	</frame>
</frame>
""";
}

/* ------------------------------------- */
/** Create the Info manialink
 *
 *	@return		The ManiaLink string
 */
Text CreateLayerInfo() {
	return
"""
<script><!--
	main() {
		declare Label_PosTotal <=> (Page.GetFirstChild("PosTotal") as CMlLabel);
		declare Label_PosCurrent <=> (Page.GetFirstChild("PosCurrent") as CMlLabel);
		declare netread Net_LayerInfoUpdated for UI = 0;
		declare netread Net_PosTotal for UI = 0;
		declare netread Net_PosCurrent for UI = 0;
		declare LayerInfoUpdated = 0;
		declare LastUpdate = 0;
		
		while(True) {
			yield;
			if (LastUpdate + 500 > Now) continue;
			LastUpdate = Now;
			if (LayerInfoUpdated == Net_LayerInfoUpdated) continue;
			LayerInfoUpdated = Net_LayerInfoUpdated;
			
			declare PosCurrentString = "";
			if (Net_PosTotal <= 0) PosCurrentString = "-";
			else PosCurrentString = ""^Net_PosCurrent;
			
			Label_PosTotal.SetText("/"^Net_PosTotal);
			Label_PosCurrent.SetText(PosCurrentString);
		}
	}
--></script>
<frame posn="150 -88">
	<label posn="0 1" halign="left" valign="bottom" id="PosTotal" />
	<label posn="0 0" halign="right" valign="bottom" style="TextRaceChrono" id="PosCurrent" />
</frame>
""";
}

/* ------------------------------------- */
/** Update the Info manialink
 *
 *	@param	_Player		The player to update
 */
Void UpdateLayerInfo(CSmPlayer _Player) {
	if (_Player.Score == Null) return;
	
	declare UI <=> UIManager.GetUI(_Player);
	if (UI == Null) return;
	
	declare netwrite Net_LayerInfoUpdated for UI = 0;
	declare netwrite Net_PosTotal for UI = 0;
	declare netwrite Net_PosCurrent for UI = 0;
	Net_LayerInfoUpdated = Now;
	Net_PosTotal = Scores.count;
	Net_PosCurrent = Scores.keyof(_Player.Score) + 1;
}

/* ------------------------------------- */
// Main
/* ------------------------------------- */
main() {
	/* -------------------------------------- */
	// Set mode options
	UseClans = False;
	
	/* -------------------------------------- */
	// Create the rules
	declare ModeName = "Melee";
	declare ModeRules = _("Free for all\n\n- Hit an opponent to score a point.\n- The player with the most points wins.");
	Rules::Create(ModeName, ModeRules);

	/* -------------------------------------- */
	// Create the UI layers
	declare LayerAttached	= False;
	declare LayerDetached	= False;
	declare LayerUpdated	= False;
	declare LayerDestroyed	= False;
	// UI All
	declare LayerScoresTableId		= Layers::Create("ScoresTable");
	declare LayerScoresInSpawnId	= Layers::Create("ScoresInSpawn");
	// UI Players
	declare LayerInfoId				= Layers::Create("Info");
	
	Layers::GetFromId(LayerScoresTableId).Type = CUILayer::EUILayerType::ScoresTable;
	Layers::GetFromId(LayerScoresInSpawnId).Type = CUILayer::EUILayerType::ScreenIn3d;
	
	while (!ServerShutdownRequested) {
/* ------------------------------------- */
// Map/Round begin
/* ------------------------------------- */
		Mode::LoadMap();
    XmlRpc.SendCallback("beginMap",MapName);    		
		SetNbFakePlayers(C_NbBots, 0);
		G_SpawnsList.clear();
		G_LatestSpawnId = NullId;
		XmlRpc.SendCallback("beginMatch",MapName);		
		Score::MatchBegin();
		XmlRpc.SendCallback("beginRound",fixGetRankings());		
		Score::RoundBegin();
		MatchEndRequested = False;
		
		UIManager.ResetAll();
		SM::SetupDefaultVisibility();
		Rules::Attach();
		
		LayerUpdated = Layers::Update("ScoresTable", CreateLayerScoresTable());
		LayerUpdated = Layers::Update("ScoresInSpawn", UpdateLayerScoresInSpawn());
		LayerAttached = Layers::Attach("ScoresTable", NullId);
		LayerAttached = Layers::Attach("ScoresInSpawn", NullId);
		
		UIManager.UIAll.UISequence = CUIConfig::EUISequence::Intro;
		UIManager.UIAll.BigMessageSound = CUIConfig::EUISound::StartRound;
		UIManager.UIAll.BigMessageSoundVariant = 0;
		UIManager.UIAll.BigMessage = _("New match");
		wait(UIManager.UIAll.UISequenceIsCompleted);
		UIManager.UIAll.BigMessage = "";
		UIManager.UIAll.UISequence = CUIConfig::EUISequence::Playing;
		
		declare LastUITick = 0;
		declare PrevPosTotal = 0;
		StartTime = Now;
		EndTime = StartTime + (S_TimeLimit * 1000);
		while (!MatchEndRequested && !ServerShutdownRequested) {
/* ------------------------------------- */
// Play loop
/* ------------------------------------- */
			yield;
			
			foreach (Event, PendingEvents) {
				if (Event.Type == CSmModeEvent::EType::OnArmorEmpty) {
					if (Event.Shooter == Event.Victim || Event.Shooter == Null) {
						Score::RemovePoints(Event.Victim, 1);
					}
          XmlRpc.SendCallback("playerDeath", Event.Victim.Login);					
					PassOn(Event);
				} else if (Event.Type == CSmModeEvent::EType::OnHit) {
					if (Event.Shooter == Event.Victim) {
						Discard(Event);
					} else {
						declare Points = Event.Damage / 100;
						Score::AddPoints(Event.Shooter, Points);
						Event.ShooterPoints = Points;
            XmlRpc.SendCallback("playerHit", "Victim:"^Event.Victim.Login^";Shooter:"^Event.Shooter.Login^";"^Points);						
						// Play sound and notice if someone is close to win
						if (Event.Shooter != Null && Event.Shooter.Score != Null) {
							declare Gap = S_PointLimit - Event.Shooter.Score.RoundPoints;
							if (Gap <= 3 && Gap > 0) {
								declare Variant = 3 - Gap;
								declare Msg = "";
								if (Gap > 1)
									Msg = TextLib::Compose(_("$<%1$> is %2 points from victory!"), Event.Shooter.Name, TextLib::ToText(Gap));
								else 
									Msg = TextLib::Compose(_("$<%1$> is 1 point from victory!"), Event.Shooter.Name);
								UIManager.UIAll.SendNotice(
									Msg, 
									CUIConfig::ENoticeLevel::PlayerInfo, 
									Null, CUIConfig::EAvatarVariant::Default, 
									CUIConfig::EUISound::TieBreakPoint, Variant
								);
							} else if (Gap <= 0) {
								UIManager.UIAll.SendNotice(
									TextLib::Compose(_("$<%1$> gets the final hit!"), Event.Shooter.Name), 
									CUIConfig::ENoticeLevel::PlayerInfo, 
									Null, CUIConfig::EAvatarVariant::Default, 
									CUIConfig::EUISound::VictoryPoint, 0
								);
								
							}
						}
						PassOn(Event);
					}
				} else if (Event.Type == CSmModeEvent::EType::OnPlayerRequestRespawn) {
					Score::RemovePoints(Event.Player, 1);
          XmlRpc.SendCallback("playerRespawn", Event.Player.Login);					
					PassOn(Event);
				} else {
					PassOn(Event);
				}
			}	
			
			/* -------------------------------------- */
			// Spawn players
			foreach (Player in Players) {
				if (Player.SpawnStatus == CSmPlayer::ESpawnStatus::NotSpawned && !Player.RequestsSpectate) {
					SpawnPlayers(Player);
				}
			}
			
			/* -------------------------------------- */
			// Update UI
			if (LastUITick + C_UITickInterval < Now) {
				declare ScoresTableUpdated = False;
				declare PosTotalUpdated = False;
				if (PrevPosTotal != Scores.count) {
					PrevPosTotal = Scores.count;
					PosTotalUpdated = True;
				}
				foreach (Player in Players) {
					if (Layers::IsMissing("Info", Player.Id)) {
						LayerAttached = Layers::Attach("Info", Player.Id);
						LayerUpdated = Layers::Update("Info", CreateLayerInfo());
						PosTotalUpdated = True;
					}
					
					declare PosCurrentUpdated = False;
					declare PrevPosCurrent for Player = 0;
					declare PrevRoundPoints for Player = 0;
					if (PrevPosCurrent != Scores.keyof(Player.Score) + 1) {
						PrevPosCurrent = Scores.keyof(Player.Score) + 1;
						PosCurrentUpdated = True;
					}
					if (!ScoresTableUpdated && Player.Score != Null && PrevRoundPoints != Player.Score.RoundPoints) {
						PrevRoundPoints = Player.Score.RoundPoints;
						ScoresTableUpdated = True;
					}
					
					if (PosTotalUpdated || PosCurrentUpdated) UpdateLayerInfo(Player);
				}
				if (ScoresTableUpdated) LayerUpdated = Layers::Update("ScoresInSpawn", UpdateLayerScoresInSpawn());
				LastUITick = Now;
			}
			
			/* -------------------------------------- */
			// victory conditions
			declare IsMatchOver = False;
			if (Now > StartTime + (S_TimeLimit * 1000)) 
				IsMatchOver = True;
			foreach (Player in Players) {
				if (Player.Score != Null && Player.Score.RoundPoints >= S_PointLimit) IsMatchOver = True;
			}
			
			if (IsMatchOver) break;
		}
		
/* ------------------------------------- */
// Map/Round end
/* ------------------------------------- */
		XmlRpc.SendCallback("endRound",fixGetRankings());
		Score::RoundEnd();  
		XmlRpc.SendCallback("endMap",fixGetRankings());
		Score::MatchEnd(True);
		
		/* -------------------------------------- */
		// End match sequence
		declare CUser Winner <=> Null;
		declare MaxPoints = 0;
		foreach (Score in Scores) {
			if (Score.Points > MaxPoints) {
				MaxPoints = Score.Points;
				Winner <=> Score.User;
			} else if (Score.Points == MaxPoints) {
				Winner <=> Null;
			}
		}
		foreach (Player in Players) {
			if (Player.User != Winner) UnspawnPlayer(Player);
			UpdateLayerInfo(Player);
		}
		
		UIManager.UIAll.BigMessageSound = CUIConfig::EUISound::EndRound;
		UIManager.UIAll.BigMessageSoundVariant = 0;
		if (Winner != Null) {
			UIManager.UIAll.BigMessage = TextLib::Compose(_("$<%1$> wins the match!"), Winner.Name);
		} else {
			UIManager.UIAll.BigMessage = _("|Match|Draw");
		}
		sleep(2000);
		UIManager.UIAll.UISequence = CUIConfig::EUISequence::EndRound;
		UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::ForcedVisible;
		sleep(5000);
		
		UIManager.UIAll.UISequence = CUIConfig::EUISequence::Podium;
		wait(UIManager.UIAll.UISequenceIsCompleted);
		
		UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::Normal;
		UIManager.UIAll.BigMessage = "";
		
		Mode::UnloadMap();
	}
	LayerDestroyed = Layers::Destroy("ScoresTable");
	LayerDestroyed = Layers::Destroy("ScoresinSpawn");
	Rules::Destroy();
}

/* ------------------------------------- */
/** Get the rankings (temporary fix).
 *
 * @return		The rankings
 */
Text fixGetRankings() {
	declare PlayerList = "";
        	foreach (Player in Players) {
        		PlayerList = PlayerList^(Player.Login^":"^Player.Score.Points^";");
	        }
        	foreach (Player in Spectators) {
        		PlayerList = PlayerList^(Player.Login^":"^Player.Score.Points^";");
	        }
  return PlayerList;
}