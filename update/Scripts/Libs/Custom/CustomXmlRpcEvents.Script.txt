/* ---------------------------------------- */
//	Custom script extension for handling	//
//	xmlrpc events from server controllers	//
//	Author: steeffeen						//
//	Contact: schteffens@gmail.com			//
/* ---------------------------------------- */

#Const	Version				"1.4.2 (2013-02-09)"

/* How-To-Use: (Modify the file ModeBase.Script.txt)

1. Copy-Paste the following line into the ModeBase script below the other #Include lines at the beginning of the file:
#Include "Libs/Custom/CustomXmlRpcEvents.Script.txt" as CustomXmlRpcEvents

2. Copy-Paste the following line into the ModeBase script under the line +++PlayLoop+++ (Should be around line 282):
CustomXmlRpcEvents::HandleXmlRpcEvents();

*/

#Include "TextLib" as TextLib

// Get playerId for player with given login
Ident GetPlayerId(Text _Login) {
	declare PlayerId = NullId;
	foreach (Player in Players) {
		if (Player.Login == _Login) {
			return Player.Id;
		}
	}
	return PlayerId;
}

// Handle XmlRpc events
Void HandleXmlRpcEvents() {
	foreach (Event in XmlRpc.PendingEvents) {
		switch (Event.Type) {
			case CXmlRpcEvent::EType::Callback: {
				// Events regardless of passed values
				switch (Event.Param1) {
					case "setExtraRules": {
						declare ExtraRules for XmlRpc = "";
						ExtraRules = Event.Param2;
					}
					default: {
						switch (Event.Param2) {
							case "": {
								// Events without values
								switch (Event.Param1) {
									case "setDefaultValues": {
										// Set default values for each player
										foreach (Player in Players) {
												Player.AmmoGain = 1.0;
												Player.ArmorGain = 25;
												Player.ArmorReplenishGain = 0;
												Player.ArmorMax = 200;
												This.SetPlayerAmmoMax(Player, CSmMode::EWeapon::Rocket, 4);
												Player.StaminaGain = 1.0;
												Player.StaminaPower = 1.0;
										}
									}
								}
							}
							default: {
								// Parse passed values
								declare Login = "";
								declare ValueText = "";
								declare Begin = 0;
								for (Index, 0, TextLib::Length(Event.Param2)-1) {
									declare Char = TextLib::SubString(Event.Param2, Index, 1);
									switch (Char) {
										case ":": {
											Login = TextLib::SubString(Event.Param2, Begin, Index-Begin);
											Begin = Index+1;
										}
										case ";": {
											ValueText = TextLib::SubString(Event.Param2, Begin, Index-Begin);
											Begin = Index+1;
										}
									}
								}
								if (Login != "" && ValueText != "" && Begin != 0) {
									declare PlayerId = GetPlayerId(Login);
									if (PlayerId != NullId && Players.existskey(PlayerId)) {
										// Perform actions by callback name
										switch (Event.Param1) {
											case "setAmmoGain": {
												Players[PlayerId].AmmoGain = TextLib::ToReal(ValueText);
											}
											case "setArmorCount": {
												Players[PlayerId].ArmorMax = TextLib::ToInteger(ValueText);
											}
											case "setArmorGain": {
												Players[PlayerId].ArmorGain = TextLib::ToInteger(ValueText);
											}
											case "setArmorReplenishGain": {
												Players[PlayerId].ArmorReplenishGain = TextLib::ToInteger(ValueText);
											}
											case "setDefaultValues": {
												// Set default values for the player
												Players[PlayerId].AmmoGain = 1.0;
												Players[PlayerId].ArmorMax = 200;
												This.SetPlayerAmmoMax(Players[PlayerId], CSmMode::EWeapon::Rocket, 4);
												Players[PlayerId].StaminaGain = 1.0;
												Players[PlayerId].StaminaPower = 1.0;
											}
											case "setCaptureSpeed": {
												// Set capture speed as key-value variable
												declare CaptureSpeed for Players[PlayerId] = 10;
												CaptureSpeed = TextLib::ToInteger(ValueText);
											}
											case "setRocketCount": {
												This.SetPlayerAmmoMax(Players[PlayerId], CSmMode::EWeapon::Rocket, TextLib::ToInteger(ValueText));
											}
											case "setStaminaGain": {
												Players[PlayerId].StaminaGain = TextLib::ToReal(ValueText);
											}
											case "setStaminaPower": {
												Players[PlayerId].StaminaPower = TextLib::ToReal(ValueText);
											}
										}
									}
								} else {
									// Other events
									declare PlayerId = GetPlayerId(Event.Param2);
									if (PlayerId != NullId && Players.existskey(PlayerId)) {
										// Player dependent events (login passed)
										switch (Event.Param1) {
											case "disableAltMenu": {
												declare UI <=> UIManager.GetUI(Players[PlayerId]);
												if (UI != Null) {
													UI.AltMenuNoDefaultScores = True;
													UI.AltMenuNoCustomScores = True;
												}
											}
											case "enableAltMenu": {
												declare UI <=> UIManager.GetUI(Players[PlayerId]);
												if (UI != Null) {
													UI.AltMenuNoDefaultScores = False;
													UI.AltMenuNoCustomScores = False;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}